:namespace golreverse

    ⍝ todo:
    ⍝ more than one generation back, tree- (or root-) like

    rl←{2↑[2]⍵}        ⍝ left border (two columns)
    rr←{2↑[2]¯2⌽⍵}     ⍝ right border (two columns)

    do←{1↓⍵}           ⍝ drop top row
    du←{⊖1↓⊖⍵}         ⍝ drop bottom row
    dl←{1↓[2]⍵}        ⍝ drop left column
    dr←{⌽1↓[2]⌽⍵}      ⍝ drop right column

    strip←{0=⍴,⍵:⍬ ⋄ do du dl dr ⍵}    ⍝ strip surrounding cells

    mlr←{(dr¨⍺)∘.,dl¨⍵}    ⍝ merge two lists of configurations with matching borders

    key←{2⊥,⍵}   ⍝ with this key and 32bit integer width/height max is 13

    ∇ R←a mergelr b;ka;kb;ia;ib;ea;eb;l    ⍝ merge two lists of configurations
      :If (0=⍴a)∨0=⍴b ⋄ R←⍬ ⋄ :Return ⋄ :End
      ka←key¨rr¨a           ⍝ generate key values
      kb←key¨rl¨b
      ia←⍋ka                ⍝ sort wrt keys
      ib←⍋kb
      a←a[ia] ⋄ ka←ka[ia]   ⍝ rearrange configs and keys
      b←b[ib] ⋄ kb←kb[ib]
      ea←1,2≠/ka            ⍝ enclose those that are the same
      eb←1,2≠/kb
      a←ea⊂a ⋄ ka←ea⊂ka     ⍝ again, for configs and keys
      b←eb⊂b ⋄ kb←eb⊂kb
      ka←1↑¨ka              ⍝ unique keys
      kb←1↑¨kb
      l←ka∩kb               ⍝ the keys that are in both lists
      :If 0=⍴l
          R←⍬               ⍝ if none are in both lists, there's nothing to merge
      :Else
          ea←ka∊l           ⍝ make a selection binary array
          eb←kb∊l
          a←ea/a            ⍝ select appropriate configs (they are lists)
          b←eb/b
          R←⊃,/,¨a mlr¨b    ⍝ generate list with merged configs
      :End
    ∇

    mmlr←{((1⌷⍴⍵)((2⌷⍴⍵)÷2))⍴⊃¨mergelr/¨((⍴,⍵)⍴1 0)⊂,⍵}   ⍝ matrix element merge

    ∇ R←mmergelr w     ⍝ merge matrix elements
      :If 0=2|2⌷⍴w
          R←mmlr w     ⍝ if dimension is even, go ahead
      :Else
          :If (+/⊃⍴¨1↑[2]w)>+/⊃⍴¨1↑[2]⌽w   ⍝ leave away the bigger column
              R←(1↑[2]w),mmlr 1↓[2]w       ⍝ leftmost column was bigger
          :Else
              R←(mmlr⌽1↓[2]⌽w),⌽1↑[2]⌽w    ⍝ rightmost column was bigger
          :End
      :End
    ∇

    elimlr←{0=⍴⍵:⍬ ⋄ ((rl¨⍵)≡¨(rr¨⍵))/⍵}   ⍝ select only those configs with rl≡rr

    ∇ R←alle
      R←(⊂3 3)⍴¨1⊂(9⍴2)⊤¯1+⍳512       ⍝ make a list with all the 3×3 configs
    ∇

    gen←{r←¯1 0 1 ⋄ n←⊃+/,(r∘.∨r)×r∘.⊖r⌽¨⊂⍵ ⋄ (n=3)∨⍵∧n=2}   ⍝ do one generation

    ∆←#.display

    ∇ main;a;g;c;a1;a0;b
      a←alle         ⍝ all 512 3×3 configs
      g←gen¨a        ⍝ all the next generations of them
      c←{2 2⌷⍵}¨g    ⍝ all the centers thereof
      a1←c/a         ⍝ configs with center 1
      a0←(~c)/a      ⍝ configs with center 0
      ⎕RL←+/⎕TS      ⍝ randomize timer
      ⍝b←{⍵⍴(?(×/⍵)⍴100)<43}5 13       ⍝ random config
      b←(4 4⍴⍳16)∊6 7 10 11           ⍝ block
      ⍝b←b,b,b
      ∆ b                             ⍝ display the destination config
      c←(a0 a1)[b+1] ⋄ ⎕←' ' ⋄ ∆⍴¨c   ⍝ replace 0's and 1's with the config lists
     
      :Repeat         ⍝ merge rows, if only one left, eliminate for torus wrap
          :If 1<1⌷⍴c
              c←⍉¨¨⍉mmergelr⍉¨¨⍉c ⋄ ⎕←'merge ou' ⋄ ∆⍴¨c
              :If 1=1⌷⍴c ⋄ c←⍉¨¨⍉elimlr¨⍉¨¨⍉c ⋄ ⎕←'elim ou' ⋄ ∆⍴¨c ⋄ :End
          :End
      :Until 1=1⌷⍴c
     
      :Repeat         ⍝ merge columns, if one, eliminate
          :If 1<2⌷⍴c
              c←mmergelr c ⋄ ⎕←'merge lr' ⋄ ∆⍴¨c   ⍝ ∆⍴¨ displays the size of the lists
              :If 1=2⌷⍴c ⋄ c←elimlr¨c ⋄ ⎕←'elim lr' ⋄ ∆⍴¨c ⋄ :End
          :End
      :Until 1=2⌷⍴c
     
      :If 0<⍴,⊃c
          c←strip¨⊃c    ⍝ strip surrounding cells
          ∆ c           ⍝ the previous generations
          ∆ gen¨c       ⍝ test if they all become the destination config
      :End
    ∇

:endnamespace
